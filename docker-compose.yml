services:
  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      app_network: null

  backend:
    build:
      context: ./unifranzBackend
      dockerfile: Dockerfile
    container_name: node_backend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./unifranzBackend:/app
      - /app/node_modules
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    depends_on:
      - postgres
    networks:
      app_network: null

  frontend:
    build:
      context: ./unifranzAppFrontend
      dockerfile: Dockerfile
    container_name: expo_frontend
    restart: always
    ports:
      - "8081:8081"
      - "19001:19001"
      - "19002:19002"
    environment:
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
      REACT_NATIVE_PACKAGER_HOSTNAME: ${REACT_NATIVE_PACKAGER_HOSTNAME}
      API_URL: http://192.168.0.167:3000
    volumes:
      - ./unifranzAppFrontend:/app
      - node_modules:/app/node_modules
    command: npx expo start --tunnel
    depends_on:
      - backend
    networks:
      app_network: null

  rasa:
    image: rasa/rasa:latest
    ports:
      - "5005:5005"
    volumes:
      - ./rasa_project:/app
    command: run --enable-api --cors "*"
    networks:
      app_network: null
    environment:
      - SQLALCHEMY_SILENCE_UBER_WARNING=1

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  node_modules: